################################################################################
# Parameters to control the model input/output
# Generated from GIN3D Configuration GUI
################################################################################

# The # comments out the line.  If a parameter is commented, its value is set to
# zero.
# NOTE: The density is considered 1.0 for all simulations.

#-------------------------------------------------------------------------------
#                          Main Parameters
#-------------------------------------------------------------------------------

# Physical domain size, requires three floating point arguments after
# Dimensions, separated by spaces.
Dimensions 100 121 50

# Simple mesh size, requires three integer arguments after Grid, separated by
# spaces.
Grid 512 384 128

# Reference Length
# This is used as the characteristic length 'L' in calculations of the
# Reynolds and Rayleigh numbers.  Leave unset if you do not know what it is.
#
# Enter either 'LX', 'LY', 'LZ', or a number.
ReferenceLength 12.0

# Kinematic viscosity
Nu 1.2e-05

# Specify a specific physical time (in seconds) for stopping the simulation.
StopTime  19800

# Whether or not to solve for and output temperature
SolveTemperature   True

# To solve for and output geometry the line below must read #<SolidGeometry True>
#<SolidGeometry True>

# Constant forcing, requires three floating point arguments after Forcing,
# separated by spaces.
Forcing   0.0009 0.0 0.0

#-------------------------------------------------------------------------------
#                          Domain Boundary Conditions
#-------------------------------------------------------------------------------

#    Face type           Boundary setting
#    ------------------  -------------------------------------
#    NoSlip              velocity 0 at boundary
#    FreeSlip            velocity unchanged at boundary
#    Inlet               BC = inlet
#    Outlet              BC = interior velocity
#    ConvectiveOutlet    See Ferziger (2001)
#    Driven              BC = inlet in normal direction
#    Periodic            BC = opposite side
#    SmoothLogLawInlet   an inlet with a constant smooth-wall logarithmic profile
#                          in the z-direction.
#    RoughLogLawInlet    an inlet with a constant rough-wall logarithmic profile
#                          in the z-direction.
#    OneSeventhsInlet    an inlet with a constant 1/7 power law profile
#                          in the z-direction.
#    DataBase            inflow database BC, usage: DataBase path_to_database
#    WallModel           Set boundary condition to Schumann wall model 

# Only one each of an Inlet and Driven are allowed.

# Bottom is Z=0, Top   is in the Z+ direction (w component of velocity).
# South  is Y=0, North is in the Y+ direction (v component of velocity).
# West   is X=0, East  is in the X+ direction (u component of velocity).

Face_West     DNS2000
Face_East     Periodic
Face_South    Periodic
Face_North    Periodic
Face_Bottom   Periodic
Face_Top      Periodic

# InletVelocities requires three floating point values separated by spaces.
# These values apply to Inlet and LogarithmicInlet boundary conditions. With 
# the LogarithmicInlet, it is only used to determine the angle of the flow so
# magnitude does not matter.  The magnitude is found from the FrictionVelocity.
# Note: These are signed vectors, negative is west/south

InletVelocities  1.2 5 1.3

# The perturbation cell turbulent inflow conditions (first proposed by 
# Munoz-Esparza et al. 2014) applies random perturbations to groups of 
# temperature grid cells referred to as perturbation cells. These
# perturbation cells need their length, width and height defined with
# PerturbBoxLength, PerturbBoxWidth and PerturbBoxHeight, respectively.
# The number of perturbation cells from the inflow is defined by the
# PerturbZoneDepth tag as an integer value.
# The perturbation amplitude is defined by PerturbZoneRichardson.
# The perturbation cell method is activated by setting a boundary to an
# inlet and setting PerturbTurbInflow to True.
# Note: PerturbBoxLength, PerturbBoxWidth and PerturbBoxHeight can
# be set to the strings dx, dy and dz, respectively as a shortcut to
# set the perturbation dimensions equal to the grid spacing.

PerturbTurbInflow      True
PerturbZoneOffset      10
PerturbZoneRichardson  1210
PerturbZoneDepth       5
PerturbBoxLength  10
PerturbBoxWidth   10
PerturbBoxHeight  20

#-------------------------------------------------------------------------------
#                             Initial Conditions
#-------------------------------------------------------------------------------

# Set the initial condition. Choose from the following:
#    File                      Load from file. Fill in Initial_* tags below.
#    TaylorGreenVortex         u =  sin(2*PI*x)*cos(2*PI*y)
#                              v = -cos(2*PI*x)*sin(2*PI*y)
#                              w = 0.0
#    TurbulentChannelX         Note: Give FrictionVelocity and ReferenceVelocity tags
#                              u = u_tau ( 1/kappa * log(z+) + 5.2) + 2.0 * C/wx * cos(wx*x)*sin(wy*y)sin(wz*z)
#                              v = -C/wy * sin(wx*x)*cos(wy*y)sin(wz*z)
#                              w = -C/wz * sin(wx*x)*sin(wy*y)cos(wz*z)
#                              wx = round(0.5*LX) * Pi / LX
#                              wy = round(0.5*LY) * Pi / LY
#                              wz = round(3.0*LZ) * Pi / LZ
#                              C = 0.15 * Vref
#    TurbulentChannelXMean     u = u_tau ( 1/kappa * log(z+) + 5.2)
#                              v = 0.0
#                              w = 0.0
#    TurbulentChannelXPoise    u = 1.5 * Uinlet * ( 1 - y^2 / h^2 ) + perturbation
#                              v = perturbation
#                              w = perturbation
#    TurbulentChannelZ         u =  u_tau( 1/kappa * log(x+) + 5.5) + sin(Pi*x)*cos(2*z)*sin(2*y)
#                              v =  -( 1 + cos(Pi*x) ) * sin(z) * sin(4.1*y)
#                              w = -0.5*Pi*sin(z) * sin(Pi*x) * cos(1.25*Pi*y)
#    ComplexTerrain            Note: theta determined from InletVelocity u and v components
#                              u = u_tau/kappa * log(z/z_not) * cos(theta)
#                              v = u_tau/kappa * log(z/z_not) * sin(theta)
#                              w = 0.0
#    ComplexTerrainSinPerturb  Note: theta determined from InletVelocity u and v components
#                              u = u_tau/kappa * log(z/z_not) * cos(theta) + 2.0*cos(x)*sin(y)*sin(z)
#                              v = u_tau/kappa * log(z/z_not) * sin(theta) - sin(x)*cos(y)*sin(z)
#                              w = -sin(x)*sin(y)*( 1.0 + cos(z) )
#    ABCFlow                   u = cos(y) + sin(z)
#                              v = sin(x) + cos(z)
#                              w = cos(x) + sin(y)
# An option not listed or no option specified at all results in an
# initial field of zero velocity.
InitialCondition  ComplexTerrainSinPerturb

#-------------------------------------------------------------------------------
#                             Flow Solver Parameters
#-------------------------------------------------------------------------------

#Choose the finite difference method for spatial derivatives
#0.00 means CDS, 1.00 means FOU, values between are allowed
AdvectionScheme 0.3


# The time derivative method
#   Euler        (first order forward Euler)
#   AdamsBash    (second order Adams-Bashforth, aka 'AB2')
TimeMethod  EULER


# Specify a computational time step. Set a to negative number if dynamic time
# step adjustment is desired.
ConstTimeStep   -0.1


#CFL*dz/velmax is the convective dt limit
CFL      0.5


#DTStability*dz*dz/Nu is the viscous dt limit
DTStability   0.2


# Choose either Iterative or Multigrid
SolverMethod	          Multigrid

# Reasonable values:
#   Cycle         V, W, or W1, recommend V
#   Smoother      Jacobi or GS
#   Loops         1-10
#   Levels        2-N, recommend about 2-3 less than the maximum
#   SmoothIters   1-10 1-10. Good choices include '2 1' and '4 2'
#   JacobiWeight  0.55 - 0.95, recommend 0.86 (from Trottenberg says 0.857)
#   SORWeight     1.0 - 1.8
MG_Cycle                V
MG_Smoother             Jacobi
MG_Loops                2
MG_Levels               50
MG_Smoother_Iterations  4 2
MG_Jacobi_Weight        0.86
MG_SOR_Weight           1.00

#-------------------------------------------------------------------------------
#                           Solution Output Parameters
#-------------------------------------------------------------------------------
# An optional path for the results
OutputPath     /home/anup
# Optional prefix (default is 'gin3d_soln')
OutputPrefix     prefix_of_output

# Which 2D plane to output (XY, XZ, YZ) or Mesh for the entire 3D domain.
# Can select multiple planes.
OutputPlane Mesh
OutputPlane YZ

# If a plane is selected, choose the location of the slice along the
# direction perpendicular to the plane as a decimal (0.0-1.0)
OutputSlice 0.50

# Data output for the Matrix output: u, v, w, p, phi
MatrixData v

# To restart a simulation, simply give the directory to the ouptut from the previous
# simulation. The most recent timestep present in the directory will be chosen.
# Full path starting from / is recommended. Ensure the last / is also included. This
# does not automatically place in the / if missing.
RestartDirectory   /home/anup

# Output formats.  Output formats can be combined by giving one line per type.
# Supported format types are:
#    Matrix          display values on the screen
#    DataFile        writes data to an ASCII file with .dat suffix
#    Binary          writes a single binary file using MPI-IO with a .bin
#                       suffix
#    PBinary         writes parallel binary files using MPI-IO with a .bin
#                       suffix
#    VTK             Visualization Toolkit Image file (.vti)
#    PVTK            Parallel VTK Image file (.pvti and .vti). Number of vti
#                       files generated is the same as the number of GPUs.
#    HDF5_Multiple   Write out heavy data in HDF5 format with XDMF files for
#                       visualization software. Produces multiple HDF5 files,
#                       one for each time step.
#
# Multiple output formats can be requested (e.g. both Matrix and VTK). The
# PVTK option cannot be combined with its sequential counterpart.  Doing so
# defaults to the VTK option. Also, VTK cannot be chosen when using more than
# eight GPUs and will default to PVTK.
OutputFormat  VTK
OutputFormat  Binary

# Two methods of controlling output frequency: iterations and physical time.
# Setting an interval negative will disable that method of control.

# Output by iteration:
# Write files every N timesteps. OutputFrequencyVTK is for VTK and PVTK file
# types. OutputFrequencyText is for DataFile, Binary, and PBinary file types.
# The output frequency can be changed part way through a simulation by
# setting OutputFrequencyVTKSwitch or OutputFrequencyTextSwitch. WTK output
# frequency will be every OutputFrequencyVTK1 timesteps until
# OutputFrequencyVTKSwitch timesteps is reached, then the frequency will be
# every OutputFrequencyVTK2 timesteps.

OutputFrequencyVTK1          100000
OutputFrequencyVTK2          5000000
OutputFrequencyVTKSwitch     2500000
OutputFrequencyText1         100000
OutputFrequencyText2         100000
OutputFrequencyTextSwitch    2500000

# Output by physical time:
# Writes files every time interval (in seconds) rather than every N
# See avobe for description of interval switching and corresponding file
# types.
OutputTimeIntervalVTK1          1000
OutputTimeIntervalVTK2          5000
OutputTimeIntervalVTKSwitch     100000
OutputTimeIntervalText1         1000
OutputTimeIntervalText2         5000
OutputTimeIntervalTextSwitch    100000

# Output options for OutputVariablesVTK and OutputVariablesTXT tags:
#   *   All variables
#   @   Only variables needed for restarting simulation
#   u   Velocity
#   p   Pressure
#   t   Temperature
#   q   Q-criterion
#   d   Density (PGM Solid Representation)
#   g   IB Flags(Immersed Boundary Method)
#   z   Distance field
#   n   Eddy Viscosity
#   c   Smagorinsky model coefficient (Dynamic C_s)
#   i   Inflow Perturbation
# Choose any combination of these, each character separated by spaces.  The
# time-averaged values are output in the final files, if applicable.
# For example, OutputVariablesVTK u p t will output velocity, pressure,
# instantaneous temperature.
# If no or incorrect options are given, * is the default.

# Choose output variables for VTK
OutputVariablesVTK  u n z g c
# Choose output variables for DataFile and/or Binary
OutputVariablesTXT  

# -------------------------------------------------------------------------------
#                               Time Series Options
# -------------------------------------------------------------------------------
# Set averaging to true or false.  Set the starting time for averaging to start.
# Starting time does not matter if PrecursorSim is set to True.
TimeAvg      True
StartingTime 18000

# Set statistical quantity to calculate with TurbStats tags:
#   m   time averaging of primitive quantities
#   s   symmetric components of Reynolds stress tensor (shear)
#   d   diagonal components of Reynolds stress tensor (normal)
#   i   two-point covariance of u component in x- and y-directions
TurbStats D I

# Pass in mean velocity profile to compute turbulent fluctuations in the
# z-direction.

# -------------------------------------------------------------------------------
#                          Variable Tracking
# -------------------------------------------------------------------------------
# Track all applicable primitive variables as the simulation progresses.
#
# Give the physical time interval to output the variables e.g., giving a value
# of 20.0 will output every 20 seconds of physical time.
TrackInterval

#
# -------------------------------------------------------------------------------
#                              Temperature
# -------------------------------------------------------------------------------

# Notes:
#    Re = (ReferenceVelocity * L / Nu)
#    Ra = (g * Beta * (Tmax - Tmin) * L^3) / (Gamma * Nu)
#    Pr = (Nu * RhoInf) / Gamma
#    Gr = Ra / Pr
TemperatureAdvectionScheme 0.00


# Gravity magnitude
Gravity 0 0 -9.81
# Thermal expansion coefficient (1/T for ideal gas)
Beta 

Temp_Infinity 

TurbulentPrandtl 

# Thermal Diffusivity  (Nu / Prandtl number)
Gamma 

# Scalar transport for temperature
# Note that gravity is assumed to act in the negative Z direction.
# The Boussinesq approximation is included in the w-momentum equation.
Temp_West   Dirichlet 
Temp_East   Dirichlet 
Temp_South  Neumann 
Temp_North  Neumann 
Temp_Bottom Neumann 
Temp_Top    Neumann 

# Source term for temperature
Source_PHI 

# -------------------------------------------------------------------------------
#                            Turbulence Parameters
# -------------------------------------------------------------------------------

# The filter width for LES models is the numerical grid.
# Turbulence model:
#   Laminar        Initialize simulation as laminar
#   None           No turbulence model but initialized as turbulent flow
#   Smagorinsky    The basic eddy viscosity model (J. Smagorinsky, 1963)
#   LagDynamic     The Lagrangian dynamic model Ref:(Meneveau, Lund, Cabot; 1996)
#   SmagRANS       A hybrid RANS/LES approach with the original Smagorinsky
#                    (LES) and Prandtl mixing length (RANS) models
#   LagDynRANS     A hybrid RANS/LES approach with the Lagrangian dynamic
#                    (LES) and Prandtl mixing length (RANS)  models
#   RSCSmag        Reynolds-stress-constrained Smagorinsky model.
#                  See S. Chen et al., JFM, 2012 for RSC concept.
#   RSCLagDyn      Reynolds-stress-constrained Lagrangian dynamic model.
#                  See S. Chen et al., JFM, 2012 for RSC concept.
#   RSCSmagIB      The RSCSmag option but with immersed boundary reconstruction.
#   RSCLagDynIB    The RSCLagDyn option but with immersed boundary reconstruction.
#   LinearForcing  Linear forcing for DNS of isotropic turbulence.
#                  See T.S. Lundgren, CTR Briefs, 2003.
#   MasonThomson   Mason Thomson model used with original Smagorinsky model.
#                  See Mason, Thomson, JFM, 1992

TurbulenceModel  Smagorinsky

# The default initialization is a quiescent flow field.  Certain combinations
# of boundary conditions and flow regimes have preset initial conditions in
# the code, see Domain Boundary Conditions section for more details.  Care
# should be taken when using the LagDynamic model as a quiescent field will
# result in Lij and Mij both being zero.  Cs in with this model is essentially
# (LijMij) / (MijMij).
# Cs for Smagorinsky model.  Typically 0.01 - 0.25.
TurbCS 

# For RANS/LES transition height, either set the tag
# TransitionHeight to a value above 0.00001 or set the
# dimensionless parameter Zeta,
#   Zeta = h / (2*Delta),
# where h is height normal to surface and Delta is filter width.
# TransitionHeight overrides Zeta if both are set.
TransitionHeight  

# -------------------------------------------------------------------------------
#                            Geometry Parameters
# -------------------------------------------------------------------------------

IBReconstruction  RoughLogLaw
Roughness  40
